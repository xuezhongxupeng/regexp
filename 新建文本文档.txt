
 正则表达式
    -> 元字符
    -> 正则方法
        -> test
            语法: <regexp>.test( string ) -> boolean
            判断这个字符串是否符合这个正则表达式
            常用与验证
        -> exec
            语法: <regexp>.exec( string ) -> Array
            将匹配到的提取出来.
            1> 单个字符串提取
                /e/.exec( 'abcdefg' ) -> [ 'e' ]
                /h/.exec( 'abcdefg' ) -> null
            2> 提取并解析( 常用 )
                分组: 在 正则表达式中使用 () 可以将匹配的结果进行分组. 
                学会分组的编号.
                    1) 从左往右数 左圆括号 (
                    2) 依次从 1 开始给 圆括号编号
                     123  4   5  6
                    /(((.)(.))(.)(.))/
                使用 exec 方法返回的是一个数组. 在匹配的结果中, 匹配到的字符串是数组的 第 0 个元素.
                其中的每一组对应于数组的每一项.
                    var r = /(((.)(.))(.)(.))/;
                    var str = 'abcd';
                    r.exec( str );

                    // [ 0 ]: 匹配到的结果:   'abcd'
                    // [ 1 ]: 匹配到的第1组:  'abcd'
                    // [ 2 ]: 匹配到的第2组:  'ab'
                    // [ 3 ]: 匹配到的第3组:  'a'
                    // ...
                
                对路径的解析:
                    /.:.*\\.+\..+/
                    例如: c:\windows\system32\1.mp3

                    // 贪婪模式, 所有 +, * 这类元字符都是尽可能多匹配
                    /.+.+.+/
                    'abcdefg'
                    
                    // 取消贪婪使用 ?
                    /.+?.+.+/
                    'abcdefg'


            3> 循环提取所有
                'abcdefgedgedg' // 将其中所有的 e 取出来
                操作:
                1) 在正则表达式中启用全局模式: /..../g, new RegExp( '...', 'g' )
                2) 调用一次 exec 方法, 获取一个匹配项
                3) 再次调用 exec 方法, 获得下一个匹配项
                4) 如此往复, 没有匹配项的是否返回 null, 再次调用 exec 则匹配返回第一个匹配项

                var m;
                while ( ( m = r.exec( str ) ) != null ) {
                    // m 就是每一次匹配到的结果
                }